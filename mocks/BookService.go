// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	book "api/features/book"

	mock "github.com/stretchr/testify/mock"
)

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, newBook
func (_m *BookService) Add(token interface{}, newBook book.Core) (book.Core, error) {
	ret := _m.Called(token, newBook)

	var r0 book.Core
	if rf, ok := ret.Get(0).(func(interface{}, book.Core) book.Core); ok {
		r0 = rf(token, newBook)
	} else {
		r0 = ret.Get(0).(book.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, book.Core) error); ok {
		r1 = rf(token, newBook)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, bookID
func (_m *BookService) Delete(token interface{}, bookID uint) error {
	ret := _m.Called(token, bookID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, bookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: token, bookID, updatedData
func (_m *BookService) Update(token interface{}, bookID uint, updatedData book.Core) (book.Core, error) {
	ret := _m.Called(token, bookID, updatedData)

	var r0 book.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint, book.Core) book.Core); ok {
		r0 = rf(token, bookID, updatedData)
	} else {
		r0 = ret.Get(0).(book.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint, book.Core) error); ok {
		r1 = rf(token, bookID, updatedData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookService creates a new instance of BookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookService(t mockConstructorTestingTNewBookService) *BookService {
	mock := &BookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
